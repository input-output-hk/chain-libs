# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
xx fbffeaabdd9205d6357e670f0c459e302a3a73df78b7a83b6c325e964426f7ac # shrinks to input = _LinearFeeCertificateCalculationArgs { certificate: PoolUpdate(PoolUpdate { pool_id: $hash_ty(0x0000000000000000000000000000000000000000000000000000000000000000), last_pool_reg_hash: $hash_ty(0x0000000000000000000000000000000000000000000000000000000000000000), new_pool_reg: PoolRegistration { serial: 88135213636861873334065374730012286566, start_validity: TimeOffsetSeconds(DurationSeconds(0)), permissions: PoolPermissions(1), owners: [], operators: [], rewards: TaxType { fixed: Value(0), ratio: Ratio { numerator: 0, denominator: 1 }, max_limit: None }, reward_account: None, keys: GenesisPraosLeader { kes_public_key: 8713bc7dad9e7c44b808362472db92f585a2800346b41aefa5f312d5fd36ba25, vrf_public_key: 3ced33b2b2e3a8bea61d96dbb6b19ab30cdf57b63337eb524b3baec4a9f6b11d } } }), inputs: 51, outputs: 107, fee: LinearFee { constant: 14490812259754214442, coefficient: 17322993152452863280, certificate: 7529483332656277344, per_certificate_fees: PerCertificateFee { certificate_pool_registration: None, certificate_stake_delegation: None, certificate_owner_stake_delegation: None }, per_vote_certificate_fees: PerVoteCertificateFee { certificate_vote_plan: None, certificate_vote_cast: None } }, per_certificate_fees: PerCertificateFee { certificate_pool_registration: Some(5320370286035796238), certificate_stake_delegation: Some(10950963058278111810), certificate_owner_stake_delegation: Some(3297345355559201563) }, per_vote_certificate_fees: PerVoteCertificateFee { certificate_vote_plan: Some(2313643208954441482), certificate_vote_cast: Some(856452277390726849) } }
xx 0da562956af5fb4e679ef90ef6be7e7a9133d5f3ea0170daf4a9a3c4fbf52789 # shrinks to certificate = StakeDelegation(StakeDelegation { account_id: UnspecifiedAccountIdentifier([8, 223, 5, 145, 58, 81, 247, 178, 158, 174, 134, 48, 104, 159, 17, 4, 6, 225, 127, 146, 156, 153, 40, 245, 126, 40, 57, 192, 41, 192, 41, 45]), delegation: Full($hash_ty(0xa9b0e1162bd0418cd2fe9bafbad24917cb82d5c2116b4a8d6364afbdabc56708)) }), (inputs, outputs) = (134, 65), mut fee = LinearFee { constant: 4549724585863053576, coefficient: 1508282654200737, certificate: 10506766324807891095, per_certificate_fees: PerCertificateFee { certificate_pool_registration: None, certificate_stake_delegation: None, certificate_owner_stake_delegation: None }, per_vote_certificate_fees: PerVoteCertificateFee { certificate_vote_plan: None, certificate_vote_cast: None } }, per_certificate_fees = PerCertificateFee { certificate_pool_registration: Some(17172537719933998720), certificate_stake_delegation: Some(13609077618456097088), certificate_owner_stake_delegation: Some(11463491015297414666) }, per_vote_certificate_fees = PerVoteCertificateFee { certificate_vote_plan: Some(6573062770396386093), certificate_vote_cast: Some(2491464453412536342) }
